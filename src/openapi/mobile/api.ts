/* tslint:disable */
/* eslint-disable */
/**
 * CM Catalogue - Mobile API
 * A service for mobile service to download data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MobileAPIInfo
 */
export interface MobileAPIInfo {
    /**
     * 
     * @type {number}
     * @memberof MobileAPIInfo
     */
    'dbVersion': number;
    /**
     * 
     * @type {number}
     * @memberof MobileAPIInfo
     */
    'fileVersion': number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SchemaFile
 */
export interface SchemaFile {
    /**
     * 
     * @type {any}
     * @memberof SchemaFile
     */
    'file': any;
}

/**
 * MobileApi - axios parameter creator
 * @export
 */
export const MobileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Export file for mobile to launch in offline mode
         * @param {'db' | 'file'} infoType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadData: async (infoType: 'db' | 'file', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'infoType' is not null or undefined
            assertParamExists('downloadData', 'infoType', infoType)
            const localVarPath = `/download/{info_type}`
                .replace(`{${"info_type"}}`, encodeURIComponent(String(infoType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve mobile API info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobileAPIInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMobileAPIInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MobileApi - functional programming interface
 * @export
 */
export const MobileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MobileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Export file for mobile to launch in offline mode
         * @param {'db' | 'file'} infoType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadData(infoType: 'db' | 'file', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadData(infoType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve mobile API info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobileAPIInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MobileAPIInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMobileAPIInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MobileApi - factory interface
 * @export
 */
export const MobileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MobileApiFp(configuration)
    return {
        /**
         * 
         * @summary Export file for mobile to launch in offline mode
         * @param {'db' | 'file'} infoType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadData(infoType: 'db' | 'file', options?: any): AxiosPromise<SchemaFile> {
            return localVarFp.downloadData(infoType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve mobile API info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobileAPIInfo(options?: any): AxiosPromise<MobileAPIInfo> {
            return localVarFp.getMobileAPIInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MobileApi - object-oriented interface
 * @export
 * @class MobileApi
 * @extends {BaseAPI}
 */
export class MobileApi extends BaseAPI {
    /**
     * 
     * @summary Export file for mobile to launch in offline mode
     * @param {'db' | 'file'} infoType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobileApi
     */
    public downloadData(infoType: 'db' | 'file', options?: AxiosRequestConfig) {
        return MobileApiFp(this.configuration).downloadData(infoType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve mobile API info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobileApi
     */
    public getMobileAPIInfo(options?: AxiosRequestConfig) {
        return MobileApiFp(this.configuration).getMobileAPIInfo(options).then((request) => request(this.axios, this.basePath));
    }
}


